# Kind cluster configuration for Chattingo application
# This creates a multi-node cluster with ingress support
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: chattingo-cluster

# Networking configuration
networking:
  # WARNING: It is _strongly_ recommended that you keep this the default
  # (127.0.0.1) for security reasons. However it is possible to change this.
  apiServerAddress: "127.0.0.1"
  # By default the API server listens on a random port.
  # You may choose a specific port but probably don't need to in most cases.
  # Using a random port makes it easier to spin up multiple clusters.
  apiServerPort: 6443
  # Disable default CNI to use custom CNI
  disableDefaultCNI: false
  # Set kubeProxyMode to iptables for better performance
  kubeProxyMode: "iptables"
  # Pod subnet (default is fine)
  podSubnet: "10.244.0.0/16"
  # Service subnet (default is fine)  
  serviceSubnet: "10.96.0.0/12"

# Node configuration - 1 control plane + 3 worker nodes for production-like setup
nodes:
# Control plane node
- role: control-plane
  image: kindest/node:v1.29.0@sha256:eaa1450915475849a73a9227b8f201df25e55e268e5d619312131292e324d570
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  # Allow the local host to make requests to the Kubernetes API server
  - containerPort: 6443
    hostPort: 6443
  # HTTP ingress
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  # HTTPS ingress  
  - containerPort: 443
    hostPort: 443
    protocol: TCP
  # Expose ports for monitoring (Prometheus, Grafana)
  - containerPort: 9090
    hostPort: 9090
    protocol: TCP
  - containerPort: 3001
    hostPort: 3001
    protocol: TCP
  # Expose MySQL port for external access (development only)
  - containerPort: 3306
    hostPort: 3306
    protocol: TCP
  extraMounts:
  # Mount local logs directory for log collection
  - hostPath: ./logs
    containerPath: /var/log/chattingo
    propagation: HostToContainer

# Worker node 1
- role: worker
  image: kindest/node:v1.29.0@sha256:eaa1450915475849a73a9227b8f201df25e55e268e5d619312131292e324d570
  labels:
    node-type: "backend"
    tier: "application"
  extraMounts:
  - hostPath: ./logs
    containerPath: /var/log/chattingo
    propagation: HostToContainer

# Worker node 2  
- role: worker
  image: kindest/node:v1.29.0@sha256:eaa1450915475849a73a9227b8f201df25e55e268e5d619312131292e324d570
  labels:
    node-type: "frontend"
    tier: "presentation"
  extraMounts:
  - hostPath: ./logs
    containerPath: /var/log/chattingo
    propagation: HostToContainer

# Worker node 3
- role: worker
  image: kindest/node:v1.29.0@sha256:eaa1450915475849a73a9227b8f201df25e55e268e5d619312131292e324d570
  labels:
    node-type: "database"
    tier: "data"
  extraMounts:
  - hostPath: ./logs
    containerPath: /var/log/chattingo
    propagation: HostToContainer
  - hostPath: ./mysql-data
    containerPath: /var/lib/mysql-data
    propagation: HostToContainer

# Feature gates for enabling additional Kubernetes features
featureGates:
  # Enable VPA (Vertical Pod Autoscaler) support
  "VPARequests": true
  # Enable topology aware hints
  "TopologyAwareHints": true
  # Enable graceful node shutdown
  "GracefulNodeShutdown": true

# Runtime configuration
runtimeConfig:
  # Enable autoscaling/v2 API for HPA
  "autoscaling/v2": "true"
  # Enable networking.k8s.io/v1 for NetworkPolicies
  "networking.k8s.io/v1": "true"

# Containerd configuration for better performance
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:5001"]
    endpoint = ["http://localhost:5001"]
