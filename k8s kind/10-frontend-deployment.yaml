# Chattingo Frontend Deployment
# React application served with Nginx with optimized configuration
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chattingo-frontend
  namespace: chattingo
  labels:
    app.kubernetes.io/name: chattingo-frontend
    app.kubernetes.io/instance: chattingo-frontend
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: chattingo-platform
    app.kubernetes.io/managed-by: kubernetes
    tier: presentation
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Chattingo frontend React application with Nginx"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: chattingo-frontend
      app.kubernetes.io/instance: chattingo-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chattingo-frontend
        app.kubernetes.io/instance: chattingo-frontend
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: frontend
        app.kubernetes.io/part-of: chattingo-platform
        app.kubernetes.io/managed-by: kubernetes
        tier: presentation
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
        co.elastic.logs/enabled: "true"
        co.elastic.logs/module: nginx
    spec:
      priorityClassName: chattingo-medium-priority
      serviceAccountName: default
      nodeSelector:
        node-type: frontend
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

      initContainers:
      - name: wait-for-backend
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for backend service to be ready..."
          until nc -z backend-service 8080; do
            echo "Backend is not ready yet... waiting 5 seconds"
            sleep 5
          done
          echo "Backend is ready!"
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

      containers:
      - name: chattingo-frontend
        image: chattingo/frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
          protocol: TCP

        env:
        # Frontend Configuration from ConfigMap
        - name: REACT_APP_API_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: chattingo-frontend-config
              key: REACT_APP_API_BASE_URL
        - name: REACT_APP_WS_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: chattingo-frontend-config
              key: REACT_APP_WS_BASE_URL
        - name: REACT_APP_NAME
          valueFrom:
            configMapKeyRef:
              name: chattingo-frontend-config
              key: REACT_APP_NAME
        - name: REACT_APP_VERSION
          valueFrom:
            configMapKeyRef:
              name: chattingo-frontend-config
              key: REACT_APP_VERSION
        - name: REACT_APP_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: chattingo-frontend-config
              key: REACT_APP_ENVIRONMENT
        
        # Pod Information
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName

        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-pid
          mountPath: /var/run
        - name: tmp-volume
          mountPath: /tmp

        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "512Mi"
          limits:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 15

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - SETGID
            - SETUID
            - NET_BIND_SERVICE

      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          items:
          - key: nginx.conf
            path: default.conf
      - name: nginx-cache
        emptyDir:
          sizeLimit: 100Mi
      - name: nginx-pid
        emptyDir:
          sizeLimit: 10Mi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi

      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

      # Affinity rules for optimal pod placement
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: tier
                operator: In
                values:
                - presentation
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - chattingo-frontend
              topologyKey: kubernetes.io/hostname

      # Tolerations for frontend nodes
      tolerations:
      - key: node-type
        operator: Equal
        value: frontend
        effect: NoSchedule

      imagePullSecrets:
      - name: docker-registry-secret
