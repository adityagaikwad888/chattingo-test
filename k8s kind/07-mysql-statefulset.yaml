# MySQL StatefulSet for Chattingo Application
# Provides persistent database with stable network identity
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-statefulset
  namespace: chattingo
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: mysql-chattingo
    app.kubernetes.io/version: "8.0"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: chattingo-platform
    app.kubernetes.io/managed-by: kubernetes
    tier: data
spec:
  serviceName: mysql-headless-service
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: mysql-chattingo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: mysql-chattingo
        app.kubernetes.io/version: "8.0"
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: chattingo-platform
        app.kubernetes.io/managed-by: kubernetes
        tier: data
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9104"
        prometheus.io/path: "/metrics"
    spec:
      priorityClassName: chattingo-critical-priority
      nodeSelector:
        node-type: database
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: init-mysql
        image: mysql:8.0.35
        command:
        - sh
        - -c
        - |
          echo "Initializing MySQL data directory..."
          if [ ! -d "/var/lib/mysql/mysql" ]; then
            echo "MySQL data directory not found, will be initialized by main container"
          else
            echo "MySQL data directory already exists"
          fi
          chown -R 999:999 /var/lib/mysql
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        securityContext:
          runAsUser: 0
      containers:
      - name: mysql
        image: mysql:8.0.35
        ports:
        - name: mysql
          containerPort: 3306
          protocol: TCP
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_PASSWORD
        - name: MYSQL_CHARSET
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_CHARSET
        - name: MYSQL_COLLATION
          valueFrom:
            configMapKeyRef:
              name: mysql-config
              key: MYSQL_COLLATION
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: mysql-config-volume
          mountPath: /etc/mysql/conf.d
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysql -u root -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - "mysqladmin ping -u root -p$MYSQL_ROOT_PASSWORD"
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - SETGID
            - SETUID
      
      # MySQL Exporter for Prometheus metrics
      - name: mysql-exporter
        image: prom/mysqld-exporter:v0.15.1
        ports:
        - name: metrics
          containerPort: 9104
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "root:$(MYSQL_ROOT_PASSWORD)@(localhost:3306)/"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_ROOT_PASSWORD
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9104
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9104
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL

      volumes:
      - name: mysql-config-volume
        configMap:
          name: mysql-config
          items:
          - key: my.cnf
            path: my.cnf
      - name: mysql-initdb
        configMap:
          name: mysql-config
          items:
          - key: init.sql
            path: init.sql
            mode: 0644
          defaultMode: 0644

      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      
      # Affinity rules to ensure database runs on appropriate nodes
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: tier
                operator: In
                values:
                - data
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - mysql
              topologyKey: kubernetes.io/hostname

      # Tolerations for dedicated database nodes
      tolerations:
      - key: node-type
        operator: Equal
        value: database
        effect: NoSchedule

  volumeClaimTemplates:
  - metadata:
      name: mysql-storage
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: mysql-chattingo
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: chattingo-platform
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: mysql-storage
      resources:
        requests:
          storage: 10Gi

  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
